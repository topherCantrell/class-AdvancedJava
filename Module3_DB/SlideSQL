
-- startNetworkServer in one window. By default this only accepts from "loopback" and no authentication.

-- ij
-- connect 'jdbc:derby://localhost:1527/bookit'
-- connect 'jdbc:derby://localhost:1527/bookit;create=true'
-- connect 'jdbc:derby:bookit'

create SCHEMA HR;

-- SCHEMA APP is the default

set schema APP;

drop table APP.BOOK;
create table APP.BOOK (NAME varchar(20), COUNT int);

insert into APP.BOOK (NAME, COUNT) values ('Java',2);
insert into APP.BOOK (NAME, COUNT) values ('C++',1);

drop table APP.BOOK;

create table APP.BOOK (
    ID integer 
        primary key 
        generated always as identity,
        -- generated by default as identity,
    name varchar(20), 
    COUNT int
);

insert into APP.BOOK (NAME, COUNT) values ('Java',2);


-- FOR SLIDES

-- http://stackoverflow.com/questions/338156/table-naming-dilemma-singular-vs-plural-names

drop table APP.BOOK;

create table APP.BOOK (ISBN varchar(20) PRIMARY KEY, NAME varchar(100), PRICE DECIMAL(5,2), COUNT INT, SOLD INT);

-- then add primary key to prevent duplicates
insert into APP.BOOK values 
    ('1234', 'Learn C++',   9.95, 8,  2), 
    ('5678', 'Learn Java', 50.00, 18, 2),
    ('9981', 'Using Perl',  2.46, 5,  0),
    ('1055', 'JavaScript', 10.00, 12, 0);
     
SET SCHEMA APP; -- NOT a good idea! Be explicit, not lazy

select * from BOOK; 

select NAME, PRICE from BOOK;

select NAME, PRICE from BOOK order by PRICE desc;

select * from BOOK where PRICE >= 10.00;

select * from BOOK where PRICE >= 10.00 order by NAME;

select * from BOOK where sold>0 and price>=10 order by NAME;

alter table BOOK add PUBLISHER varchar(100);
-- select * from BOOK note NULL
-- can make NOT NULLABLE if required

drop table APP.BOOK;
drop table APP.PUBLISHER;

create table APP.BOOK (ISBN varchar(20) PRIMARY KEY, NAME varchar(100), PRICE DECIMAL(5,2), COUNT INT, SOLD INT, PUBLISHER varchar(100));

create table APP.PUBLISHER (NAME varchar(100), ADDRESS varchar(100));

insert into APP.BOOK values 
    ('1234', 'Learn C++',   9.95, 8,  2, 'Good Books'),
    ('5678', 'Learn Java', 50.00, 18, 2, 'Smarties'),
    ('9981', 'Using Perl',  2.46, 5,  0, 'Smarties'),
    ('1055', 'JavaScript', 10.00, 12, 0,  'Good Books');

insert into APP.PUBLISHER values
    ('Good Books', 'Huntsville, AL'),
    ('Smarties','Los Angeles, CA');
    
select * from BOOK, PUBLISHER;

select * from BOOK, PUBLISHER where BOOK.PUBLISHER = PUBLISHER.NAME;

select * from BOOK, PUBLISHER where BOOK.PUBLISHER = PUBLISHER.NAME and sold>0 order by BOOK.NAME;
    
-- Need for more checking ... publisher name is valid ... foreign key

-- Need for primary key ID other than ISBN and Publisher ... might change

--




